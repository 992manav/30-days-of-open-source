name: Award label by comment only for CODEOWNERS

on:
  issue_comment:
    types: [created]

jobs:
  award-label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read # pour lire le fichier CODEOWNERS
      actions: read # si besoin de lire actions context
    steps:
      - name: Check for /award command and codeowner status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = context.payload.comment.body.trim();
            const commenter = context.payload.comment.user.login;
            const issue = context.payload.issue;

            // V√©rifier que c'est un PR, pas une issue simple, si n√©cessaire
            const isPR = issue.pull_request !== undefined;

            // Regex pour /award <nombre>
            const match = commentBody.match(/^\/award\s+(\d+)$/i);
            if (!match) return;

            const awardValue = `üî• ${match[1]}`;

            // Lecture du fichier CODEOWNERS
            const ownerFile = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: ".github/CODEOWNERS"
            });

            // Le contenu est base64 encod√©
            const decoded = Buffer.from(ownerFile.data.content, 'base64').toString('utf8');
            const lines = decoded.split('\n').map(l => l.trim()).filter(l => l && !l.startsWith('#'));

            // Fonction simple pour d√©terminer si commenter est dans CODEOWNERS
            // On suppose que si il y a une ligne avec '*' ou sans chemin pr√©cis, + son login, il est propri√©taire global.
            let isOwner = false;
            for (const line of lines) {
              const parts = line.split(/\s+/);  // chemin + owners
              const pathPattern = parts[0];
              const owners = parts.slice(1);     // liste des owners

              // Si owners contient commenter
              if (owners.includes(`@${commenter}`)) {
                // On pourrait v√©rifier le cheminPattern pour plus de pr√©cision
                isOwner = true;
                break;
              }
            }

            if (!isOwner) {
              // Optionnel : commenter pour dire que l‚Äôauteur n‚Äôa pas le droit
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `@${commenter} vous n'avez d'autorisation pour utiliser \`/award\`.`
              });
              return;
            }

            // Si c‚Äôest code owner, ajouter le label correspondant
            const labelName = awardValue.toString(); 
            // V√©rifier si le label existe, sinon cr√©er ou √©chouer
            try {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: [labelName]
              });
            } catch (err) {
              console.log(`Erreur en ajoutant le label ${labelName}: ${err.message}`);
            }
